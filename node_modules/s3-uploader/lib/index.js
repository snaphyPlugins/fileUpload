// Generated by CoffeeScript 1.10.0
var Image, S3, Upload, auto, each, extname, fs, map, metadata, resize, retry;

fs = require('fs');

extname = require('path').extname;

S3 = require('aws-sdk').S3;

auto = require('async').auto;

each = require('async').each;

map = require('async').map;

retry = require('async').retry;

resize = require('im-resize');

metadata = require('im-metadata');

Upload = module.exports = function(bucketName, opts1) {
  var base, base1, base10, base11, base12, base13, base14, base15, base2, base3, base4, base5, base6, base7, base8, base9;
  this.opts = opts1 != null ? opts1 : {};
  if (!bucketName) {
    throw new TypeError('Bucket name can not be undefined');
  }
  if ((base = this.opts).aws == null) {
    base.aws = {};
  }
  if ((base1 = this.opts.aws).acl == null) {
    base1.acl = 'private';
  }
  if ((base2 = this.opts.aws).httpOptions == null) {
    base2.httpOptions = {};
  }
  if ((base3 = this.opts.aws.httpOptions).timeout == null) {
    base3.timeout = 10000;
  }
  if ((base4 = this.opts.aws).maxRetries == null) {
    base4.maxRetries = 3;
  }
  if ((base5 = this.opts.aws).params == null) {
    base5.params = {};
  }
  this.opts.aws.params.Bucket = bucketName;
  if ((base6 = this.opts.aws).path == null) {
    base6.path = '';
  }
  if ((base7 = this.opts.aws).region == null) {
    base7.region = 'us-east-1';
  }
  if ((base8 = this.opts.aws).sslEnabled == null) {
    base8.sslEnabled = true;
  }
  if ((base9 = this.opts).cleanup == null) {
    base9.cleanup = {};
  }
  if ((base10 = this.opts).returnExif == null) {
    base10.returnExif = false;
  }
  if ((base11 = this.opts).resize == null) {
    base11.resize = {};
  }
  if ((base12 = this.opts.resize).quality == null) {
    base12.quality = 70;
  }
  if ((base13 = this.opts).versions == null) {
    base13.versions = [];
  }
  if (!this.opts.url && this.opts.aws.region === 'us-east-1') {
    if ((base14 = this.opts).url == null) {
      base14.url = "https://s3.amazonaws.com/" + bucketName + "/";
    }
  } else if (!this.opts.url) {
    if ((base15 = this.opts).url == null) {
      base15.url = "https://s3-" + this.opts.aws.region + ".amazonaws.com/" + bucketName + "/";
    }
  }
  this._getRandomPath = this.opts.randomPath || require('@starefossen/rand-path');
  this.s3 = new S3(this.opts.aws);
  return this;
};

Upload.prototype._getDestPath = function(prefix, callback) {
  return retry(5, (function(_this) {
    return function(cb) {
      var path;
      path = prefix + _this._getRandomPath();
      return _this.s3.listObjects({
        Prefix: path
      }, function(err, data) {
        if (err) {
          return cb(err);
        }
        if (data.Contents.length === 0) {
          return cb(null, path);
        }
        return cb(new Error("Path " + path + " not avaiable"));
      });
    };
  })(this), callback);
};

Upload.prototype.upload = function(src, opts, cb) {
  var image;
  image = new Image(src, opts, this);
  return image.start(cb);
};

Image = module.exports.Image = function(src1, opts1, upload) {
  this.src = src1;
  this.opts = opts1;
  this.upload = upload;
  return this;
};

Image.prototype.start = function(cb) {
  return auto({
    metadata: this.getMetadata.bind(this, this.src),
    dest: this.getDest.bind(this),
    versions: ['metadata', this.resizeVersions.bind(this)],
    uploads: ['versions', 'dest', this.uploadVersions.bind(this)],
    cleanup: ['uploads', this.removeVersions.bind(this)]
  }, function(err, results) {
    return cb(err, results.uploads, results.metadata);
  });
};

Image.prototype.getMetadata = function(src, cb) {
  return metadata(src, {
    exif: this.upload.opts.returnExif,
    autoOrient: true
  }, cb);
};

Image.prototype.getDest = function(cb) {
  var prefix, ref;
  prefix = ((ref = this.opts) != null ? ref.awsPath : void 0) || this.upload.opts.aws.path;
  if (this.opts.path) {
    return process.nextTick((function(_this) {
      return function() {
        return cb(null, prefix + _this.opts.path);
      };
    })(this));
  }
  return this.upload._getDestPath(prefix, cb);
};

Image.prototype.resizeVersions = function(cb, results) {
  return resize(results.metadata, {
    path: this.upload.opts.resize.path,
    prefix: this.upload.opts.resize.prefix,
    quality: this.upload.opts.resize.quality,
    versions: JSON.parse(JSON.stringify(this.upload.opts.versions))
  }, cb);
};

Image.prototype.uploadVersions = function(cb, results) {
  var org;
  if (this.upload.opts.original) {
    org = JSON.parse(JSON.stringify(this.upload.opts.original));
    org.original = true;
    org.width = results.metadata.width;
    org.height = results.metadata.height;
    org.path = this.src;
    results.versions.push(org);
  }
  return map(results.versions, this._upload.bind(this, results.dest), cb);
};

Image.prototype.removeVersions = function(cb, results) {
  return each(results.uploads, (function(_this) {
    return function(image, callback) {
      if (!_this.upload.opts.cleanup.original && image.original || !_this.upload.opts.cleanup.versions && !image.original) {
        return setTimeout(callback, 0);
      }
      return fs.unlink(image.path, callback);
    };
  })(this), function(err) {
    return cb();
  });
};

Image.prototype._upload = function(dest, version, cb) {
  var format, options;
  if (version.awsImageAcl == null) {
    version.awsImageAcl = this.upload.opts.aws.acl;
  }
  format = extname(version.path).substr(1).toLowerCase();
  options = {
    Key: "" + dest + (version.suffix || '') + "." + format,
    ACL: version.awsImageAcl,
    Body: fs.createReadStream(version.path),
    ContentType: "image/" + (format === 'jpg' ? 'jpeg' : format)
  };
  if (version.awsImageExpires) {
    options.Expires = new Date(Date.now() + version.awsImageExpires);
  }
  if (version.awsImageMaxAge) {
    options.CacheControl = "public, max-age=" + version.awsImageMaxAge;
  }
  return this.upload.s3.putObject(options, (function(_this) {
    return function(err, data) {
      if (err) {
        return cb(err);
      }
      version.etag = data.ETag;
      version.key = options.Key;
      if (_this.upload.opts.url) {
        version.url = _this.upload.opts.url + options.Key;
      }
      return cb(null, version);
    };
  })(this));
};
